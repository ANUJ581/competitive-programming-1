import java.util.*;

public class SuffixArrayHashing {

  static final long BASE = 137;
  static final long MOD = 10000007;
  
  static long[] pow;
  static long[] hash;
  static Integer[] sa;
  static int len;
  static String text;
  
  public static void main (String[] args) {
  	text = " mississippi";
    len = text.length();
    pow = new long[len];
    hash = new long[len];
    sa = new Integer[len-1];
    pow[0] = 1;
    for (int i = 1; i < len; i++) {
    	pow[i] = (pow[i-1] * BASE) % MOD;
    	hash[i] = (hash[i-1] * BASE + text.charAt(i)) % MOD;
      	sa[i-1] = i;
    }
    Arrays.sort(sa, new SuffixComparator());
    for (int i = 0; i < len-1; i++) {
    	System.out.println(text.substring(sa[i]));
    }
    
  }
  static class SuffixComparator implements Comparator<Integer> {
  	@Override
    public int compare (Integer i, Integer j) {
    	if (text.charAt(i) != text.charAt(j))
          return text.charAt(i) - text.charAt(j);
      	int lo = 0;
      	int hi = len - Math.max(i, j) - 1;
      	while (lo <= hi) {
      		int mid = lo + (hi - lo) / 2;
          	if (getHash(i, i + mid) == getHash(j, j + mid))
              lo = mid + 1;
          	else
              hi = mid - 1;
        }
			System.out.println(text.substring(i) + " " + text.substring(j) + " " + lo + " " + i + " " + j);
      if (lo + Math.max(i, j) == len - 1) {
        	return j - i;
      }
      	return text.charAt(lo + i) - text.charAt(lo + j);
    }
    private long getHash (int i, int j) {
		return ((hash[j] - hash[i-1] * pow[j - (i - 1)]%MOD+MOD)%MOD);
    }
  }
}
